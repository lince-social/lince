====================================================================================================
Lince: Tool for registry, interconnection and automation of Needs and Contributions with open scope.
====================================================================================================

# Installation:
Install nix:
https://nixos.org/download

After cloning the repo:
https://github.com/lince-social/lince/archive/refs/heads/main.zip or
git clone https://github.com/lince-social/lince.git or
git clone git@github.com:lince-social/lince.git

To run lince, type on the directory you cloned it:
nix-shell

Or anywhere on your system:
nix-shell /path/to/lince

Then open your browser on the adress:
localhost:5000

# Disclamer
This project is licensed under the GNU GPLv3 license. Crowdfunding is the source of development compensation:
https://github.com/sponsors/lince-social | https://www.patreon.com/lince_social | https://www.apoia.se/lince 

Lince is tries to facilitate and automate the connection between people and resources, transforming needs and contributions into data. The gains and losses related to the interaction, such as transportation, production and services themselves, remain the responsibility of the parties involved.

===================================================================================================================
                                                  DOCUMENTATION
===================================================================================================================

@: What is Lince?
#: Lince is a tool for registry, interconnection and automation of Needs and Contributions with open scope. 

@: Ok, but what is it?
#: Lince is an app that can be used to model and/or automate personal tasks, items, computer actions, economic trades between parties... The limit is your imagination (and your wizard skills with computers). 

@: Sure...
#: I'll explain everything in detail, so follow me. I promisse the journey is worth the end, traveler.


# General Functioning

## Database:
Lince works with a database, it searches for it in .config/lince/lince.sql, if not found there, it defaults for the directory lince was cloned to, in src/db/versions/lince.sql. It is recomended to frequently backup the lince.sql file, if some error or mistake happens, your information is safe.

It is tempting to say TCITD, or 'The code is the documentation', because documentations are often not up to date and that is the best way of seeing the truth about the program. But that is not best for everyone, so this documentation in text was made. With that said, if you want to learn more about lince by reading the documentation, it is advised to also have the database declaration open: https://github.com/lince-social/lince/blob/main/src/db/schema.sql.

Firstly the tables of the database will be explained, then the ways in which they can interact with themselves and/or your/other computers:

===================================================================================================================
                                                  TABLES
===================================================================================================================


## Table: record

| record   |
| ---------|
| id       |
| quantity |
| head     |
| body     |
| location |

Lince is centered on the 'record' table, but like, according to the creator... like, what do they know?

Let's assume this is Lince's sun, it is the most capable one on the task of giving Lince life. The thing the app revolves around.

---

| record   | DATA STRUCTURE |
| ---------|----------------|
| id       | SERIAL         |
| quantity | REAL           |
| head     | TEXT           |
| body     | TEXT           |
| location | POINT          |

'id's are automatically generated.

'quantity' represents the availability of the record, if negative it is a Necessity, if positive, a Contribution, zero makes it not mean much, sometimes.

'head' and 'body' are meant to be parts of a whole, where one can be used for a short summary and the other a description, or one has all the information and the other holds tags for filtering through views. With a pubsub protocol, one can send a short information of the record, in this case it can be the head, and put the rest in the body. Only those interested in the head will ask for the body of the record. That way the minimum amount of information is sent over the network, making it faster and stuff, I think.

'location' is an important information for interactions outside of computers (they exist, it's insane) or any other use you want to give it.

---

| record   | DATA STRUCTURE | USER INPUT |
| ---------|----------------|------------|
| id       | SERIAL         |            |
| quantity | REAL           | -1         |
| head     | TEXT           | Eat Apple  |
| body     | TEXT           |            |
| location | POINT          |            |

So for an example imagine that you like apples and you want to create a task to eat it today.

You create a 'record', giving it '-1' to the 'quantity', for that action is a Necessity in your life right now, and 'Eat Apple' to the 'head'.

---

| record   | DATA STRUCTURE | USER INPUT | ACTUAL RECORD |
| ---------|----------------| -----------| --------------|
| id       | SERIAL         |            | 1             |
| quantity | REAL           | -1         | -1            |
| head     | TEXT           | Eat Apple  | Eat Apple     |
| body     | TEXT           |            | NULL          |
| location | POINT          |            | NULL          |

The end result, on the PostgreSQL database, is this record. In summary, fields with 'NOT NULL' that have defaults don't need to be filled, as it happens automatically.

---

| id  | quantity | head      | body | location |
|-----|----------|-----------|------|----------|
| 1   | -1       | Eat Apple | NULL | NULL     |
|     |          |           |      |          |
|     |          |           |      |          |
|     |          |           |      |          |
|     |          |           |      |          |

The theoretical apple eater in the example chose to put -1 in 'quantity' because they have a view that gives them all the records with a negative 'quantity' (quantity < 0).

So they will see the 'Eat Apple' task on that view, but more about that in a second, now look at other examples of records (rows are set horizontally now).

---

| id  | quantity | head        | body                 | location |
|-----|----------|-------------|----------------------|----------|
| 1   | -1       | Eat Apple   | NULL                 | NULL     |
| 2   | 1        | Apple       | Item, Food           | NULL     |
| 3   | 0        | Brush Teeth | Action, Hygiene      | NULL     |
| 4   | 3        | Toothbrush  | Item, Hygiene        | NULL     |
| 5   | -1       | Meditate    | Action, Spirituality | NULL     |

As you can see, there are records with different quantities, heads, and bodies. They are modeling actions and items.

The user likes to center it's filtering through the body column, seeing all actions, or all items of a certain area of their lives, like Hygiene, each in different created views.

---

## Table: views

| views     | DATA STRUCTURE |
|-----------|----------------|
| id        | SERIAL         |
| view      | TEXT           |
| view_name | TEXT           |

We've spoken so much about views, let's dive into them. They are essentially SQL queries, allowing you to select what columns you want to see, filtered, ordered and much more, just the way you want it.
The view column has the SQL query, the view_name has the view's name. Simple, right?

---

## Table: `configuration`

| Column                  | DATA STRUCTURE |
|-------------------------|----------------|
| id                      | SERIAL         |
| quantity                | REAL           |
| save_mode               | VARCHAR        |
| view_id                 | INTEGER        |
| column_information_mode | VARCHAR        |
| keymap                  | JSONB          |
| truncation              | JSONB          |
| table_query             | JSONB          |
| language                | VARCHAR        |
| timezone                | VARCHAR        |

This table is responsible for changing the behavior of Lince. The 'quantity' sets the active configuration, with the value of 1, the other rows have it 0. 'save_mode' can be automatic or manual, happening only when the user demands it, or after every database change. 'view_id' sets the rows you will see, this is a reference to the id of a row in view. 'column_information_mode' can be 'quiet', 'verbose'

---

## Table: `history`

| Column      | DATA STRUCTURE |
|-------------|----------------|
| id          | SERIAL         |
| record_id   | INTEGER        |
| change_time | TIMESTAMP      |
| old_quantity| REAL           |
| new_quantity| REAL           |

---

## Table: `karma`

| Column     | DATA STRUCTURE |
|------------|----------------|
| id         | SERIAL         |
| quantity   | INTEGER        |
| expression | TEXT           |

---

## Table: `frequency`

| Column       | DATA STRUCTURE |
|--------------|----------------|
| id           | SERIAL         |
| quantity     | INTEGER        |
| day_week     | REAL           |
| months       | REAL           |
| days         | REAL           |
| seconds      | REAL           |
| next_date    | TIMESTAMP      |
| finish_date  | DATE           |
| when_done    | INTEGER        |

---

## Table: `sum`

| Column         | DATA STRUCTURE |
|----------------|----------------|
| id             | SERIAL         |
| quantity       | INTEGER        |
| record_id      | INTEGER        |
| sum_mode       | INTEGER        |
| interval_mode  | VARCHAR        |
| interval_length| INTERVAL       |
| end_lag        | INTERVAL       |
| end_date       | TIMESTAMP      |

---

## Table: `command`

| Column   | DATA STRUCTURE |
|----------|----------------|
| id       | SERIAL         |
| quantity | INTEGER        |
| command  | TEXT           |

---

## Table: `transfer`

| Column                            | DATA STRUCTURE |
|-----------------------------------|----------------|
| id                                | SERIAL         |
| records_received                  | JSON           |
| records_contributed               | JSON           |
| receiving_agreement               | BOOL           |
| contributing_agreement            | BOOL           |
| agreement_time                    | TIMESTAMP      |
| receiving_transfer_confirmation   | BOOL           |
| contributing_transfer_confirmation| BOOL           |
| transfer_time                     | TIMESTAMP      |


===================================================================================================================
                                                  KARMA
===================================================================================================================































CREATE TABLE views (
	id SERIAL PRIMARY KEY,
 	view TEXT NOT NULL DEFAULT 'SELECT * FROM record',
	view_name TEXT
);

CREATE TABLE configuration (
	id SERIAL PRIMARY KEY,
	quantity REAL NOT NULL DEFAULT 1,
	save_mode VARCHAR(9) NOT NULL DEFAULT 'Automatic' CHECK (save_mode in ('Automatic', 'Manual')),
 	view_id INTEGER NOT NULL DEFAULT 1,
	column_information_mode VARCHAR(7) NOT NULL DEFAULT 'verbose' CHECK (column_information_mode in ('verbose', 'short', 'silent')),
	keymap jsonb NOT NULL DEFAULT '{}',
	truncation jsonb NOT NULL DEFAULT '{"head": 150, "body": 150, "view": 100, "command": 150}',
	table_query jsonb NOT NULL DEFAULT '{"record": "SELECT * FROM RECORD ORDER BY quantity ASC, head ASC, body ASC, id ASC", "frequency": "SELECT * FROM frequency ORDER BY id ASC", "command": "SELECT * FROM command ORDER BY id ASC"}',
	language VARCHAR(15) NOT NULL DEFAULT 'en-US',
	timezone VARCHAR(3) NOT NULL DEFAULT '-3'
);

CREATE TABLE record (
	id SERIAL PRIMARY KEY,
	quantity REAL NOT NULL DEFAULT 1,
	head TEXT,
	body TEXT,
	location POINT
);

CREATE TABLE history (
    id SERIAL PRIMARY KEY,
    record_id INTEGER NOT NULL,
    change_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    old_quantity REAL NOT NULL,
    new_quantity REAL NOT NULL
);

CREATE TABLE karma (
	id SERIAL PRIMARY KEY,
	quantity INTEGER NOT NULL DEFAULT 1,
	expression TEXT
);

CREATE TABLE frequency (
	id SERIAL PRIMARY KEY,
	quantity INTEGER NOT NULL DEFAULT 1,
	day_week REAL,
	months REAL DEFAULT 0 NOT NULL,
	days REAL DEFAULT 0 NOT NULL,
	seconds REAL DEFAULT 0 NOT NULL,
	next_date TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
	finish_date DATE,
	catch_up_sum INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE sum (
	id SERIAL PRIMARY KEY,
	quantity INTEGER NOT NULL DEFAULT 1,
	record_id INTEGER NOT NULL,

	sum_mode INTEGER NOT NULL DEFAULT 0 CHECK (sum_mode in (-1,0,1)),
    interval_mode VARCHAR(10) NOT NULL DEFAULT 'relative' CHECK (interval_mode IN ('fixed', 'relative')),

    interval_length INTERVAL NOT NULL,
	end_lag interval,
    end_date TIMESTAMP WITH TIME ZONE DEFAULT now()
);

CREATE TABLE command (
	id SERIAL PRIMARY KEY,
	quantity INTEGER NOT NULL DEFAULT 1,
	command TEXT NOT NULL
);

CREATE TABLE transfer (
	id SERIAL PRIMARY KEY,

	records_received json,
	records_contributed json,

	receiving_agreement BOOL,
	contributing_agreement BOOL,
	agreement_time TIMESTAMP WITH TIME ZONE,

	receiving_transfer_confirmation BOOL,
	contributing_transfer_confirmation BOOL,
	transfer_time TIMESTAMP WITH TIME ZONE
);

CREATE OR REPLACE FUNCTION record_quantity_change()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.quantity IS DISTINCT FROM OLD.quantity THEN
        INSERT INTO history (record_id, old_quantity, new_quantity)
        VALUES (OLD.id, OLD.quantity, NEW.quantity);
    END IF;
    RETURN NEW;
END;
$$
 LANGUAGE plpgsql;

CREATE TRIGGER record_quantity_update
AFTER UPDATE OF quantity ON record
FOR EACH ROW
EXECUTE FUNCTION record_quantity_change();
